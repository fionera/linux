#ifndef _RTK_MEMORY_LAYOUT_H
#define _RTK_MEMORY_LAYOUT_H

#define _MB_ 1024*1024
#define DO_ALIGNMENT(x, y) (DIV_ROUND_UP(x, y))*y
#define DO_ALIGNMENT_CHECK(x, y) (x & (y - 1))

/**
 *  --- memory layout start ---
 */
#define VIDEO_RINGBUFFER_START 0x1b200000
#define VIDEO_RINGBUFFER_SIZE 20*_MB_

#ifdef CONFIG_REALTEK_LOGBUF
#define CONST_LOGBUF_MEM_ADDR_START (0x1ca00000)
#define CONST_LOGBUF_MEM_SIZE (512*1024)
#endif

#ifdef CONFIG_ZONE_ZRAM
#define GPU_MEM_SIZE        372*_MB_
#define ZONE_ZRAM_SIZE      512*_MB_
#else
#define GPU_MEM_SIZE        244*_MB_
#define ZONE_ZRAM_SIZE      0
#endif

#ifdef CONFIG_CUSTOMER_TV006	//for GAL reserve mem, 4MB align
#define KXLP_CONST_GAL_MEM_ADDR_START (0x39000000)
#define KXLP_CONST_GAL_MEM_SIZE (112*_MB_)

#define KXHP_CONST_GAL_MEM_ADDR_START (0x70000000)
#define KXHP_CONST_GAL_MEM_SIZE (88*_MB_)
#else
#define KXLP_CONST_GAL_MEM_ADDR_START 0
#define KXLP_CONST_GAL_MEM_SIZE 0

#define KXHP_CONST_GAL_MEM_ADDR_START 0
#define KXHP_CONST_GAL_MEM_SIZE 0
#endif

/* KxHp */
#ifndef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define KXHP_KERNEL_MEMC_START       0x46400000
#define KXHP_KERNEL_MDOMAIN_START    0x4a700000
#define KXHP_KERNEL_DI_NR_START      0x4cc00000
#define KXHP_KERNEL_NN_START         0x4d900000
#define KXHP_KERNEL_OD_START         0x4da00000
#define KXHP_KERNEL_VBM_START        0x4e000000
#define KXHP_KERNEL_VIP_START        0x59800000

#define KXHP_KERNEL_TP_START         0x60000000
#else
#define KXHP_KERNEL_MEMC_START       0x40c00000
#define KXHP_KERNEL_MDOMAIN_START    0x44f00000
#define KXHP_KERNEL_DI_NR_START      0x4ac00000
#define KXHP_KERNEL_NN_START         0x4b900000
#define KXHP_KERNEL_OD_START         0x4ba00000
#define KXHP_KERNEL_VBM_START        0x4c000000
#define KXHP_KERNEL_TP_START         0x57800000
#define KXHP_KERNEL_VIP_START        0x59800000
#endif

/* KxLp */
#ifndef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define KXLP_KERNEL_MEMC_START       0x44400000
#define KXLP_KERNEL_MDOMAIN_START    0x48700000
#else
#define KXLP_KERNEL_MEMC_START       0x40c00000
#define KXLP_KERNEL_MDOMAIN_START    0x44f00000
#endif
#define KXLP_KERNEL_DI_NR_START      0x4ac00000
#define KXLP_KERNEL_NN_START         0x4b900000
#define KXLP_KERNEL_OD_START         0x4ba00000
#define KXLP_KERNEL_VBM_START        0x4c000000
#define KXLP_KERNEL_TP_START         0x57800000
#define KXLP_KERNEL_VIP_START        0x59800000


#define KXHP_SCALER_MEMC_START (KXHP_KERNEL_MEMC_START)
#define KXHP_SCALER_MEMC_SIZE           67*_MB_     // 
#define KXLP_SCALER_MEMC_START (KXLP_KERNEL_MEMC_START)
#define KXLP_SCALER_MEMC_SIZE KXHP_SCALER_MEMC_SIZE //
#define SCALER_MEMC_SIZE      KXHP_SCALER_MEMC_SIZE // backward compatible for kdriver

#define KXHP_SCALER_MDOMAIN_START (KXHP_SCALER_MEMC_START + KXHP_SCALER_MEMC_SIZE)
#ifndef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define KXHP_SCALER_MDOMAIN_SIZE        37*_MB_ // mdomain 37M
#else
#define KXHP_SCALER_MDOMAIN_SIZE        93*_MB_ // mdomain 93M
#endif
#define KXLP_SCALER_MDOMAIN_START (KXLP_SCALER_MEMC_START + KXLP_SCALER_MEMC_SIZE)
#define KXLP_SCALER_MDOMAIN_SIZE        KXHP_SCALER_MDOMAIN_SIZE

#if defined(KXHP_KERNEL_MDOMAIN_START) && defined(KXLP_KERNEL_MDOMAIN_START)
#if (KXHP_KERNEL_MDOMAIN_START != KXHP_SCALER_MDOMAIN_START) || (KXLP_KERNEL_MDOMAIN_START != KXLP_SCALER_MDOMAIN_START)
#error "Scaler M-domain size doesn't match for kernel & drivers!"
#endif
#else
#error "No define KXHP_KERNEL_MDOMAIN_START && KXLP_KERNEL_MDOMAIN_START"
#endif

#define KXHP_SCALER_DI_NR_START (KXHP_SCALER_MDOMAIN_START + KXHP_SCALER_MDOMAIN_SIZE)
#define KXHP_SCALER_DI_NR_SIZE             13*_MB_              //
#define KXLP_SCALER_DI_NR_START (KXLP_SCALER_MDOMAIN_START + KXLP_SCALER_MDOMAIN_SIZE)
#define KXLP_SCALER_DI_NR_SIZE             KXHP_SCALER_DI_NR_SIZE //

#if defined(KXHP_KERNEL_DI_NR_START) && defined(KXLP_KERNEL_DI_NR_START)
#if (KXHP_KERNEL_DI_NR_START != KXHP_SCALER_DI_NR_START) || (KXLP_KERNEL_DI_NR_START != KXLP_SCALER_DI_NR_START)
#error "Scaler DI_NR size doesn't match for kernel & drivers!"
#endif
#else
#error "No define KXHP_KERNEL_DI_NR_START && KXLP_KERNEL_DI_NR_START"
#endif

#define KXHP_SCALER_NN_START (KXHP_SCALER_DI_NR_START + KXHP_SCALER_DI_NR_SIZE)
#define KXHP_SCALER_NN_SIZE             1*_MB_              //
#define KXLP_SCALER_NN_START (KXLP_SCALER_DI_NR_START + KXLP_SCALER_DI_NR_SIZE)
#define KXLP_SCALER_NN_SIZE             KXHP_SCALER_NN_SIZE //

#if defined(KXHP_KERNEL_NN_START) && defined(KXLP_KERNEL_NN_START)
#if (KXHP_KERNEL_NN_START != KXHP_SCALER_NN_START) || (KXLP_KERNEL_NN_START != KXLP_SCALER_NN_START)
#error "Scaler NN size doesn't match for kernel & drivers!"
#endif
#else
#error "No define KXHP_KERNEL_NN_START && KXLP_KERNEL_NN_START"
#endif

#define KXHP_SCALER_OD_START (KXHP_SCALER_NN_START + KXHP_SCALER_NN_SIZE)
#define KXHP_SCALER_OD_SIZE             4*_MB_              //
#define KXLP_SCALER_OD_START (KXLP_SCALER_NN_START + KXLP_SCALER_NN_SIZE)
#define KXLP_SCALER_OD_SIZE             KXHP_SCALER_OD_SIZE //

#if defined(KXHP_KERNEL_OD_START) && defined(KXLP_KERNEL_OD_START)
#if (KXHP_KERNEL_OD_START != KXHP_SCALER_OD_START) || (KXLP_KERNEL_OD_START != KXLP_SCALER_OD_START)
#error "Scaler OD size doesn't match for kernel & drivers!"
#endif
#else
#error "No define KXHP_KERNEL_OD_START && KXLP_KERNEL_OD_START"
#endif

#define KXHP_SCLAER_MODULE_START KXHP_SCALER_MEMC_START
#define KXHP_SCALER_MODULE_SIZE_QUERY (KXHP_SCALER_MEMC_SIZE + KXHP_SCALER_MDOMAIN_SIZE + KXHP_SCALER_DI_NR_SIZE + KXHP_SCALER_NN_SIZE + KXHP_SCALER_OD_SIZE)
#define KXHP_SCALER_MODULE_SIZE DO_ALIGNMENT(KXHP_SCALER_MODULE_SIZE_QUERY, 4*_MB_)
#define KXHP_SCALER_MODULE_BAND (KXHP_SCALER_MODULE_SIZE - KXHP_SCALER_MODULE_SIZE_QUERY)

#define KXLP_SCLAER_MODULE_START KXLP_SCALER_MEMC_START
#define KXLP_SCALER_MODULE_SIZE_QUERY (KXLP_SCALER_MEMC_SIZE + KXLP_SCALER_MDOMAIN_SIZE + KXLP_SCALER_DI_NR_SIZE + KXLP_SCALER_NN_SIZE + KXLP_SCALER_OD_SIZE)
#define KXLP_SCALER_MODULE_SIZE DO_ALIGNMENT(KXLP_SCALER_MODULE_SIZE_QUERY, 4*_MB_)
#define KXLP_SCALER_MODULE_BAND (KXLP_SCALER_MODULE_SIZE - KXLP_SCALER_MODULE_SIZE_QUERY)

#if (KXHP_SCALER_MODULE_SIZE & 0x3FFFFF) // 4MB align
#error "Scaler_KXHP module size didn't follow 4MB alignment"
#endif

#if (KXLP_SCALER_MODULE_SIZE & 0x3FFFFF) // 4MB align
#error "Scaler_KXLP module size didn't follow 4MB alignment"
#endif

#define KXHP_VDEC_BUFFER_START_TMP (KXHP_SCLAER_MODULE_START + KXHP_SCALER_MODULE_SIZE)
#define KXHP_VDEC_BUFFER_START  KXHP_VDEC_BUFFER_START_TMP
#ifdef CONFIG_OPTEE_SUPPORT_MC_ALLOCATOR
#define KXHP_VDEC_BUFFER_CMPHDR_SIZE          0
#define KXHP_VDEC_BUFFER_SIZE_SELF            0
#else
#define KXHP_VDEC_BUFFER_CMPHDR_SIZE         18*_MB_    //
#define KXHP_VDEC_BUFFER_SIZE_SELF          168*_MB_    //
#endif
#define KXHP_VDEC_BUFFER_START_QUERY (KXHP_VDEC_BUFFER_START_TMP - KXHP_SCALER_MODULE_BAND)
#if (KXHP_SCALER_MODULE_BAND >= KXHP_VDEC_BUFFER_CMPHDR_SIZE)
#define KXHP_VDEC_BUFFER_SIZE_RESV KXHP_VDEC_BUFFER_SIZE_SELF
#else
// compression header with scaler band space and need extra
#define KXHP_VDEC_BUFFER_SIZE_RESV DO_ALIGNMENT((KXHP_VDEC_BUFFER_SIZE_SELF + (KXHP_VDEC_BUFFER_CMPHDR_SIZE - KXHP_SCALER_MODULE_BAND)), 4*_MB_)
#endif
#define KXHP_VDEC_BUFFER_END   (KXHP_VDEC_BUFFER_START_TMP + KXHP_VDEC_BUFFER_SIZE_RESV)
#define KXHP_VDEC_BUFFER_SIZE  KXHP_VDEC_BUFFER_SIZE_RESV

#define KXLP_VDEC_BUFFER_START_TMP (KXLP_SCLAER_MODULE_START + KXLP_SCALER_MODULE_SIZE)
#define KXLP_VDEC_BUFFER_START  KXLP_VDEC_BUFFER_START_TMP
#define KXLP_VDEC_BUFFER_CMPHDR_SIZE        KXHP_VDEC_BUFFER_CMPHDR_SIZE //
#define KXLP_VDEC_BUFFER_SIZE_SELF          KXHP_VDEC_BUFFER_SIZE_SELF   //
#define KXLP_VDEC_BUFFER_START_QUERY (KXLP_VDEC_BUFFER_START_TMP - KXLP_SCALER_MODULE_BAND)
#if (KXLP_SCALER_MODULE_BAND >= KXLP_VDEC_BUFFER_CMPHDR_SIZE)
#define KXLP_VDEC_BUFFER_SIZE_RESV KXLP_VDEC_BUFFER_SIZE_SELF
#else
// compression header with scaler band space and need extra
#define KXLP_VDEC_BUFFER_SIZE_RESV DO_ALIGNMENT((KXLP_VDEC_BUFFER_SIZE_SELF + (KXLP_VDEC_BUFFER_CMPHDR_SIZE - KXLP_SCALER_MODULE_BAND)), 4*_MB_)
#endif
#define KXLP_VDEC_BUFFER_END   (KXLP_VDEC_BUFFER_START_TMP + KXLP_VDEC_BUFFER_SIZE_RESV)
#define KXLP_VDEC_BUFFER_SIZE  KXLP_VDEC_BUFFER_SIZE_RESV

#if defined(KXHP_KERNEL_VBM_START) && defined(KXLP_KERNEL_VBM_START)
#if (KXHP_KERNEL_VBM_START != KXHP_VDEC_BUFFER_START) || (KXLP_KERNEL_VBM_START != KXLP_VDEC_BUFFER_START)
#error "VBM size doesn't match for kernel & drivers!"
#endif
#else
#error "No define KXHP_KERNEL_VBM_START && KXLP_KERNEL_VBM_START"
#endif

#if (KXHP_VDEC_BUFFER_SIZE & 0x3FFFFF) // 4MB align
#error "VBM_KXHP module size didn't follow 4MB alignment"
#endif

#if (KXLP_VDEC_BUFFER_SIZE & 0x3FFFFF) // 4MB align
#error "VBM_KXLP module size didn't follow 4MB alignment"
#endif

#ifdef CONFIG_OPTEE_SUPPORT_MC_ALLOCATOR
/* Temp test MC MMU using VBM only */
#define KXHP_CMA_MC_START   KXHP_VDEC_BUFFER_START
#define KXHP_CMA_MC_SIZE   180*_MB_

#define KXHP_DEMUX_TP_BUFFER_START (KXHP_CMA_MC_START + KXHP_CMA_MC_SIZE)
#else
#define KXHP_DEMUX_TP_BUFFER_START KXHP_KERNEL_TP_START
#endif
#define KXHP_DEMUX_TP_BUFFER_SIZE       32*_MB_                     //
#ifdef CONFIG_OPTEE_SUPPORT_MC_ALLOCATOR
/* Temp test MC MMU using VBM only */
#define KXLP_CMA_MC_START   KXLP_VDEC_BUFFER_START
#define KXLP_CMA_MC_SIZE   180*_MB_

#define KXLP_DEMUX_TP_BUFFER_START (KXLP_CMA_MC_START + KXLP_CMA_MC_SIZE)
#else
#define KXLP_DEMUX_TP_BUFFER_START KXLP_VDEC_BUFFER_END
#endif
#define KXLP_DEMUX_TP_BUFFER_SIZE       KXHP_DEMUX_TP_BUFFER_SIZE   //

#if defined(KXHP_KERNEL_TP_START) && defined(KXLP_KERNEL_TP_START)
#if (KXHP_KERNEL_TP_START != KXHP_DEMUX_TP_BUFFER_START) || (KXLP_KERNEL_TP_START != KXLP_DEMUX_TP_BUFFER_START)
#error "Demux TP size doesn't match for kernel & drivers!"
#endif
#else
#error "No define KXHP_KERNEL_TP_START && KXLP_KERNEL_TP_START"
#endif

#define KXHP_SCALER_VIP_START (KXHP_VDEC_BUFFER_END)
#define KXHP_SCALER_VIP_SIZE            2*_MB_                  //
#define KXLP_SCALER_VIP_START (KXLP_DEMUX_TP_BUFFER_START + KXLP_DEMUX_TP_BUFFER_SIZE)
#define KXLP_SCALER_VIP_SIZE            KXHP_SCALER_VIP_SIZE    //

#if defined(KXHP_KERNEL_VIP_START) && defined(KXLP_KERNEL_VIP_START)
#if (KXHP_KERNEL_VIP_START != KXHP_SCALER_VIP_START) || (KXLP_KERNEL_VIP_START != KXLP_SCALER_VIP_START)
#error "Scaler VIP size doesn't match for kernel & drivers!"
#endif
#else
#error "No define KXHP_KERNEL_VIP_START && KXLP_KERNEL_VIP_START"
#endif

#define KXHP_SNAPSHOT_RESV_START    (KXHP_SCALER_VIP_START + KXHP_SCALER_VIP_SIZE)
#if (KXHP_SCALER_VIP_SIZE & 0x3FFFFF) // 4MB align
#define KXHP_SCALER_VIP_SIZE_ALIGN  DO_ALIGNMENT(KXHP_SCALER_VIP_SIZE, 4*_MB_)
#define KXHP_SNAPSHOT_RESV_SIZE     (KXHP_SCALER_VIP_SIZE_ALIGN - KXHP_SCALER_VIP_SIZE)
#else
#define KXHP_SNAPSHOT_RESV_SIZE     0*_MB_
#endif

#define KXLP_SNAPSHOT_RESV_START    (KXLP_SCALER_VIP_START + KXLP_SCALER_VIP_SIZE)
#if (KXLP_SCALER_VIP_SIZE & 0x3FFFFF) // 4MB align
#define KXLP_SCALER_VIP_SIZE_ALIGN  DO_ALIGNMENT(KXLP_SCALER_VIP_SIZE, 4*_MB_)
#define KXLP_SNAPSHOT_RESV_SIZE     (KXLP_SCALER_VIP_SIZE_ALIGN - KXLP_SCALER_VIP_SIZE)
#else
#define KXLP_SNAPSHOT_RESV_SIZE     0*_MB_
#endif

/**
 *  --- memory layout end ---
 */

#define _KXHP_CARVEDOUT_HIGH        (KXHP_SCALER_MODULE_SIZE + KXHP_VDEC_BUFFER_SIZE + KXHP_SCALER_VIP_SIZE + GPU_MEM_SIZE)
#ifndef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define _KXHP_CMA_DESIRED_DIFF_HIGH     (248*_MB_ - KXHP_SCALER_MODULE_BAND)
#else
#define _KXHP_CMA_DESIRED_DIFF_HIGH     (48*_MB_ - KXHP_SCALER_MODULE_BAND)
#endif
#define _KXHP_CMA_DESIRED_DIFF_LOW      40*_MB_
#define _KXLP_CARVEDOUT_HIGH        (KXLP_CONST_GAL_MEM_SIZE + KXLP_SCALER_MODULE_SIZE + KXLP_VDEC_BUFFER_SIZE + KXLP_DEMUX_TP_BUFFER_SIZE + KXLP_SCALER_VIP_SIZE + GPU_MEM_SIZE)
#ifndef CONFIG_RTK_KDRV_DV_IDK_DUMP
#define _KXLP_CMA_DESIRED_DIFF_HIGH    (104*_MB_ - KXLP_SCALER_MODULE_BAND)
#else
#define _KXLP_CMA_DESIRED_DIFF_HIGH    (48*_MB_ - KXLP_SCALER_MODULE_BAND)
#endif
#define _KXLP_CMA_DESIRED_DIFF_LOW      80*_MB_

#define CMA_CACHE_EXTRA(x) (x - DEF_CACHE_SIZE)

/* static reserved for drivers, which allocate from cma region original */
#if defined(CONFIG_CUSTOMER_TV006)
#define KXHP_CMA_HIGH_RESERVED          _KXHP_CARVEDOUT_HIGH               // reserved for high memory
#define KXHP_CMA_HIGH_RESERVED_SIZE     CMA_CACHE_EXTRA(_KXHP_CMA_DESIRED_DIFF_HIGH)
#define KXHP_CMA_LOW_RESERVED_SIZE      _KXHP_CMA_DESIRED_DIFF_LOW

#define KXLP_CMA_HIGH_RESERVED          _KXLP_CARVEDOUT_HIGH               // reserved for high memory
#define KXLP_CMA_HIGH_RESERVED_SIZE     CMA_CACHE_EXTRA(_KXLP_CMA_DESIRED_DIFF_HIGH)
#define KXLP_CMA_LOW_RESERVED_SIZE      _KXLP_CMA_DESIRED_DIFF_LOW
#else
#define KXHP_CMA_HIGH_RESERVED          (GPU_MEM_SIZE)               // reserved for high memory
#define KXHP_CMA_HIGH_RESERVED_SIZE     0
#define KXHP_CMA_LOW_RESERVED_SIZE      0

#define KXLP_CMA_HIGH_RESERVED          (GPU_MEM_SIZE)               // reserved for high memory
#define KXLP_CMA_HIGH_RESERVED_SIZE     0
#define KXLP_CMA_LOW_RESERVED_SIZE      0
#endif

#define KXHP_CMA_LOW_START      0x02800000
#define KXLP_CMA_LOW_START      0x02800000

#define KXHP_CMA_HIGH_START     0x59c00000
#define KXLP_CMA_HIGH_START     0x59c00000

#if ((KXHP_SNAPSHOT_RESV_START + KXHP_SNAPSHOT_RESV_SIZE) != KXHP_CMA_HIGH_START)
#error "carvedout end addr not match with cma high start addr"
#endif

#if ((KXLP_SNAPSHOT_RESV_START + KXLP_SNAPSHOT_RESV_SIZE) != KXLP_CMA_HIGH_START)
#error "carvedout end addr not match with cma high start addr"
#endif

#endif //_RTK_MEMORY_LAYOUT_H

