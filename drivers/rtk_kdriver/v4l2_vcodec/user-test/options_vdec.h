
/*
 * NOTE:
 * THIS FILE IS AUTOGENERATED VIA OPTIONS.PY. DO NOT EDIT.
 */

#include <getopt.h>

enum {
    OPT_INPUT,
    OPT_SOURCE,
    OPT_TEST,
    OPT_LIST_TESTS,
    OPT_WIDTH,
    OPT_HEIGHT,
    OPT_BUFCNT,
    OPT_VCAP_PORT,
    OPT_BS_BUF_ADDR,
    OPT_BS_BUF_SIZE,
    OPT_IB_BUF_ADDR,
    OPT_IB_BUF_SIZE,
    OPT_VERBOSE,
    OPT_IMPORT_DMABUF,
    OPT_HELP
};

typedef struct {
    char* input;
    int   input_cnt;
    char* source;
    int   source_cnt;
    char* test;
    int   test_cnt;
    char  list_tests;
    int   list_tests_cnt;
    int   width;
    int   width_cnt;
    int   height;
    int   height_cnt;
    int   bufcnt;
    int   bufcnt_cnt;
    int   vcap_port;
    int   vcap_port_cnt;
    int   bs_buf_addr;
    int   bs_buf_addr_cnt;
    int   bs_buf_size;
    int   bs_buf_size_cnt;
    int   ib_buf_addr;
    int   ib_buf_addr_cnt;
    int   ib_buf_size;
    int   ib_buf_size_cnt;
    char  verbose;
    int   verbose_cnt;
    char  import_dmabuf;
    int   import_dmabuf_cnt;
} opts_t;

static struct option long_options[] = {
    {"input",         required_argument, 0, OPT_INPUT},
    {"source",        required_argument, 0, OPT_SOURCE},
    {"test",          required_argument, 0, OPT_TEST},
    {"list_tests",          no_argument, 0, OPT_LIST_TESTS},
    {"width",         required_argument, 0, OPT_WIDTH},
    {"height",        required_argument, 0, OPT_HEIGHT},
    {"bufcnt",        required_argument, 0, OPT_BUFCNT},
    {"vcap_port",     required_argument, 0, OPT_VCAP_PORT},
    {"bs_buf_addr",   required_argument, 0, OPT_BS_BUF_ADDR},
    {"bs_buf_size",   required_argument, 0, OPT_BS_BUF_SIZE},
    {"ib_buf_addr",   required_argument, 0, OPT_IB_BUF_ADDR},
    {"ib_buf_size",   required_argument, 0, OPT_IB_BUF_SIZE},
    {"verbose",             no_argument, 0, OPT_VERBOSE},
    {"import_dmabuf",       no_argument, 0, OPT_IMPORT_DMABUF},
    {"help",                no_argument, 0, OPT_HELP},
    {0, 0, 0, 0}
};

#define OPTSTRING "i:s:t:w:h:v"

static void printUsage ()
{
    printf("\t-i, --input file     : input file (Elementary Stream)\n");
    printf("\t-s, --source type    : source type (mpeg2, avc, hevc, avs, avs2) (Default: avc)\n");
    printf("\t-t, --test IDs       : test IDs (Default: 1)\n");
    printf("\t--list_tests         : list tests\n");
    printf("\t-w, --width number   : width (Default: 1920)\n");
    printf("\t-h, --height number  : height (Default: 1088)\n");
    printf("\t--bufcnt number      : bufcnt (Default: 8)\n");
    printf("\t--vcap_port number   : vcap port (Default: 0)\n");
    printf("\t--bs_buf_addr number : the address of bitstream buffer (Default: 0)\n");
    printf("\t--bs_buf_size number : the size of bitstream buffer (Default: 0x200000)\n");
    printf("\t--ib_buf_addr number : the address of inband command buffer (Default: 0)\n");
    printf("\t--ib_buf_size number : the size of inband command buffer (Default: 0x40000)\n");
    printf("\t-v, --verbose        : enable verbose log\n");
    printf("\t--import_dmabuf      : import dmabuf\n");
}

static void parseArgs(opts_t *opts, int argc, char **argv)
{
    int opt;
    while ((opt = getopt_long (argc, argv, OPTSTRING, long_options, NULL)) != -1)
        switch (opt) {
            case 'i':
            case OPT_INPUT:
                opts->input = optarg;
                opts->input_cnt++;
                break;
            case 's':
            case OPT_SOURCE:
                opts->source = optarg;
                opts->source_cnt++;
                break;
            case 't':
            case OPT_TEST:
                opts->test = optarg;
                opts->test_cnt++;
                break;
            case OPT_LIST_TESTS:
                opts->list_tests = 1;
                opts->list_tests_cnt++;
                break;
            case 'w':
            case OPT_WIDTH:
                opts->width = strtoul(optarg, NULL, 0);
                opts->width_cnt++;
                break;
            case 'h':
            case OPT_HEIGHT:
                opts->height = strtoul(optarg, NULL, 0);
                opts->height_cnt++;
                break;
            case OPT_BUFCNT:
                opts->bufcnt = strtoul(optarg, NULL, 0);
                opts->bufcnt_cnt++;
                break;
            case OPT_VCAP_PORT:
                opts->vcap_port = strtoul(optarg, NULL, 0);
                opts->vcap_port_cnt++;
                break;
            case OPT_BS_BUF_ADDR:
                opts->bs_buf_addr = strtoul(optarg, NULL, 0);
                opts->bs_buf_addr_cnt++;
                break;
            case OPT_BS_BUF_SIZE:
                opts->bs_buf_size = strtoul(optarg, NULL, 0);
                opts->bs_buf_size_cnt++;
                break;
            case OPT_IB_BUF_ADDR:
                opts->ib_buf_addr = strtoul(optarg, NULL, 0);
                opts->ib_buf_addr_cnt++;
                break;
            case OPT_IB_BUF_SIZE:
                opts->ib_buf_size = strtoul(optarg, NULL, 0);
                opts->ib_buf_size_cnt++;
                break;
            case 'v':
            case OPT_VERBOSE:
                opts->verbose = 1;
                opts->verbose_cnt++;
                break;
            case OPT_IMPORT_DMABUF:
                opts->import_dmabuf = 1;
                opts->import_dmabuf_cnt++;
                break;
            case OPT_HELP:
            default:
                printUsage();
                exit(0);
                break;
        }
}

opts_t opts = {
    .source = "avc",
    .test = "1",
    .width = 1920,
    .height = 1088,
    .bufcnt = 8,
    .vcap_port = 0,
    .bs_buf_addr = 0,
    .bs_buf_size = 0x200000,
    .ib_buf_addr = 0,
    .ib_buf_size = 0x40000,
};

